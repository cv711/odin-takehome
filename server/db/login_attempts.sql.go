// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: login_attempts.sql

package db

import (
	"context"
)

const getCounts = `-- name: GetCounts :one
SELECT
    COUNT(*) as global_count,
    COALESCE(SUM(CASE WHEN email = $1 THEN 1 ELSE 0 END),0)::BIGINT as email_count,
    COALESCE(SUM(CASE WHEN remote_ip = $2 THEN 1 ELSE 0 END),0)::BIGINT as ip_count
FROM login_attempts
WHERE login_attempt_time >= NOW() - INTERVAL '10 SECOND'
`

type GetCountsParams struct {
	Email    string `json:"email"`
	RemoteIp []byte `json:"remote_ip"`
}

type GetCountsRow struct {
	GlobalCount int64 `json:"global_count"`
	EmailCount  int64 `json:"email_count"`
	IpCount     int64 `json:"ip_count"`
}

func (q *Queries) GetCounts(ctx context.Context, arg GetCountsParams) (GetCountsRow, error) {
	row := q.db.QueryRow(ctx, getCounts, arg.Email, arg.RemoteIp)
	var i GetCountsRow
	err := row.Scan(&i.GlobalCount, &i.EmailCount, &i.IpCount)
	return i, err
}

const logAttempt = `-- name: LogAttempt :one
INSERT INTO login_attempts (email, remote_ip) VALUES ($1, $2) RETURNING email, remote_ip, login_attempt_time
`

type LogAttemptParams struct {
	Email    string `json:"email"`
	RemoteIp []byte `json:"remote_ip"`
}

func (q *Queries) LogAttempt(ctx context.Context, arg LogAttemptParams) (LoginAttempt, error) {
	row := q.db.QueryRow(ctx, logAttempt, arg.Email, arg.RemoteIp)
	var i LoginAttempt
	err := row.Scan(&i.Email, &i.RemoteIp, &i.LoginAttemptTime)
	return i, err
}
